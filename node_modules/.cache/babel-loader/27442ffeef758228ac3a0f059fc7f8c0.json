{"ast":null,"code":"const EIP712 = require(\"./EIP712\");\n\nconst ERC721Types = {\n  Part: [{\n    name: 'account',\n    type: 'address'\n  }, {\n    name: 'value',\n    type: 'uint96'\n  }],\n  Mint721: [{\n    name: 'tokenId',\n    type: 'uint256'\n  }, {\n    name: 'tokenURI',\n    type: 'string'\n  }, {\n    name: 'creators',\n    type: 'Part[]'\n  }, {\n    name: 'royalties',\n    type: 'Part[]'\n  }]\n};\nconst ERC1155Types = {\n  Part: [{\n    name: 'account',\n    type: 'address'\n  }, {\n    name: 'value',\n    type: 'uint96'\n  }],\n  Mint1155: [{\n    name: 'tokenId',\n    type: 'uint256'\n  }, {\n    name: 'supply',\n    type: 'uint256'\n  }, {\n    name: 'tokenURI',\n    type: 'string'\n  }, {\n    name: 'creators',\n    type: 'Part[]'\n  }, {\n    name: 'royalties',\n    type: 'Part[]'\n  }]\n};\nexport async function sign(provider, chainId, contractAddress, form, account, type) {\n  let data;\n\n  if (type === 'ERC721') {\n    data = EIP712.createTypeData({\n      name: 'Mint721',\n      version: '1',\n      chainId,\n      verifyingContract: contractAddress\n    }, 'Mint721', { ...form,\n      tokenURI: form.uri\n    }, ERC721Types);\n    console.log({\n      data\n    });\n  } else if (type === 'ERC1155') {\n    data = EIP712.createTypeData({\n      name: 'Mint1155',\n      version: '1',\n      chainId,\n      verifyingContract: contractAddress\n    }, 'Mint1155', { ...form,\n      tokenURI: form.uri\n    }, ERC1155Types);\n    console.log({\n      data\n    });\n  }\n\n  console.log({\n    data\n  });\n  return (await EIP712.signTypedData(provider, account, data)).sig;\n}","map":{"version":3,"sources":["/Users/velkoskis/Desktop/Claims/src/rarible/lazyMint.js"],"names":["EIP712","require","ERC721Types","Part","name","type","Mint721","ERC1155Types","Mint1155","sign","provider","chainId","contractAddress","form","account","data","createTypeData","version","verifyingContract","tokenURI","uri","console","log","signTypedData","sig"],"mappings":"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","sourcesContent":["const EIP712 = require(\"./EIP712\");\n\nconst ERC721Types = {\n\tPart: [\n\t\t{name: 'account', type: 'address'},\n\t\t{name: 'value', type: 'uint96'}\n\t],\n\tMint721: [\n\t\t{name: 'tokenId', type: 'uint256'},\n\t\t{name: 'tokenURI', type: 'string'},\n\t\t{name: 'creators', type: 'Part[]'},\n\t\t{name: 'royalties', type: 'Part[]'}\n\t]\n};\n\nconst ERC1155Types = {\n\tPart: [\n\t\t{name: 'account', type: 'address'},\n\t\t{name: 'value', type: 'uint96'}\n\t],\n\tMint1155: [\n\t\t{name: 'tokenId', type: 'uint256'},\n\t\t{name: 'supply', type: 'uint256'},\n\t\t{name: 'tokenURI', type: 'string'},\n\t\t{name: 'creators', type: 'Part[]'},\n\t\t{name: 'royalties', type: 'Part[]'}\n\t]\n};\n\nexport async function sign(provider, chainId, contractAddress, form, account, type) {\n\tlet data\n\tif (type === 'ERC721') {\n\tdata = EIP712.createTypeData({\n    name: 'Mint721',\n    version: '1',\n    chainId,\n    verifyingContract: contractAddress\n  },\n  'Mint721',\n  {...form, tokenURI: form.uri},\n  ERC721Types\n  );\n  console.log({data})\n\n\t} else if (type === 'ERC1155') {\n\tdata = EIP712.createTypeData({\n    name: 'Mint1155',\n    version: '1',\n    chainId,\n    verifyingContract: contractAddress\n  },\n  'Mint1155',\n  {...form, tokenURI: form.uri},\n  ERC1155Types\n  );\n  console.log({data})\n\n\t}\n\tconsole.log({data})\n\treturn (await EIP712.signTypedData(provider, account, data)).sig;\n}\n"]},"metadata":{},"sourceType":"module"}