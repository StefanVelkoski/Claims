{"ast":null,"code":"const DOMAIN_TYPE = [{\n  type: \"string\",\n  name: \"name\"\n}, {\n  type: \"string\",\n  name: \"version\"\n}, {\n  type: \"uint256\",\n  name: \"chainId\"\n}, {\n  type: \"address\",\n  name: \"verifyingContract\"\n}];\nmodule.exports = {\n  createTypeData: function (domainData, primaryType, message, types) {\n    return {\n      types: Object.assign({\n        EIP712Domain: DOMAIN_TYPE\n      }, types),\n      domain: domainData,\n      primaryType: primaryType,\n      message: message\n    };\n  },\n  signTypedData: async function (provider, from, data) {\n    const msgData = JSON.stringify(data);\n    const sig = await provider.send(\"eth_signTypedData_v4\", [from, msgData]);\n    const sig0 = sig.substring(2);\n    const r = \"0x\" + sig0.substring(0, 64);\n    const s = \"0x\" + sig0.substring(64, 128);\n    const v = parseInt(sig0.substring(128, 130), 16);\n    return {\n      data,\n      sig,\n      v,\n      r,\n      s\n    };\n  }\n};","map":{"version":3,"sources":["/Users/velkoskis/Desktop/Claims/src/rarible/EIP712.js"],"names":["DOMAIN_TYPE","type","name","module","exports","createTypeData","domainData","primaryType","message","types","Object","assign","EIP712Domain","domain","signTypedData","provider","from","data","msgData","JSON","stringify","sig","send","sig0","substring","r","s","v","parseInt"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAClB;AACEC,EAAAA,IAAI,EAAE,QADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADkB,EAKnB;AACCD,EAAAA,IAAI,EAAE,QADP;AAECC,EAAAA,IAAI,EAAE;AAFP,CALmB,EASlB;AACED,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CATkB,EAalB;AACED,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAbkB,CAApB;AAmBAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAE,UAAUC,UAAV,EAAsBC,WAAtB,EAAmCC,OAAnC,EAA4CC,KAA5C,EAAmD;AACjE,WAAO;AACLA,MAAAA,KAAK,EAAEC,MAAM,CAACC,MAAP,CAAc;AACnBC,QAAAA,YAAY,EAAEZ;AADK,OAAd,EAEJS,KAFI,CADF;AAILI,MAAAA,MAAM,EAAEP,UAJH;AAKLC,MAAAA,WAAW,EAAEA,WALR;AAMLC,MAAAA,OAAO,EAAEA;AANJ,KAAP;AAQD,GAVc;AAYfM,EAAAA,aAAa,EAAE,gBAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;AACnD,UAAMC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAhB;AACA,UAAMI,GAAG,GAAG,MAAMN,QAAQ,CAACO,IAAT,CAAc,sBAAd,EAAsC,CAACN,IAAD,EAAOE,OAAP,CAAtC,CAAlB;AACA,UAAMK,IAAI,GAAGF,GAAG,CAACG,SAAJ,CAAc,CAAd,CAAb;AACA,UAAMC,CAAC,GAAG,OAAOF,IAAI,CAACC,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAjB;AACA,UAAME,CAAC,GAAG,OAAOH,IAAI,CAACC,SAAL,CAAe,EAAf,EAAmB,GAAnB,CAAjB;AACA,UAAMG,CAAC,GAAGC,QAAQ,CAACL,IAAI,CAACC,SAAL,CAAe,GAAf,EAAoB,GAApB,CAAD,EAA2B,EAA3B,CAAlB;AACA,WAAO;AACLP,MAAAA,IADK;AAELI,MAAAA,GAFK;AAGLM,MAAAA,CAHK;AAILF,MAAAA,CAJK;AAKLC,MAAAA;AALK,KAAP;AAOD;AA1Bc,CAAjB","sourcesContent":["const DOMAIN_TYPE = [\n  {\n    type: \"string\",\n    name: \"name\"\n  },\n\t{\n\t\ttype: \"string\",\n\t\tname: \"version\"\n\t},\n  {\n    type: \"uint256\",\n    name: \"chainId\"\n  },\n  {\n    type: \"address\",\n    name: \"verifyingContract\"\n  }\n];\n\nmodule.exports = {\n  createTypeData: function (domainData, primaryType, message, types) {\n    return {\n      types: Object.assign({\n        EIP712Domain: DOMAIN_TYPE,\n      }, types),\n      domain: domainData,\n      primaryType: primaryType,\n      message: message\n    };\n  },\n\n  signTypedData: async function (provider, from, data) {\n    const msgData = JSON.stringify(data);\n    const sig = await provider.send(\"eth_signTypedData_v4\", [from, msgData]);\n    const sig0 = sig.substring(2);\n    const r = \"0x\" + sig0.substring(0, 64);\n    const s = \"0x\" + sig0.substring(64, 128);\n    const v = parseInt(sig0.substring(128, 130), 16);\n    return {\n      data,\n      sig,\n      v,\n      r,\n      s,\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}