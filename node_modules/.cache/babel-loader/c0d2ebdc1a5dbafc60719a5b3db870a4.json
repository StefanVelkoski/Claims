{"ast":null,"code":"import { utils } from \"ethers\";\nimport { RARIBLE_BASE_URL } from \"../constants\";\nimport { sign, getMessageHash } from \"./order\";\n\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\n\nasync function prepareOrderMessage(form) {\n  const raribleEncodeOrderUrl = `${RARIBLE_BASE_URL}order/encoder/order`;\n  const res = await fetch(raribleEncodeOrderUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(form)\n  });\n  const resJson = await res.json();\n  console.log({\n    resJson\n  });\n  return resJson.signMessage;\n}\n\nfunction createERC721ForEthOrder(maker, contract, tokenId, price, salt) {\n  return {\n    type: \"RARIBLE_V2\",\n    maker: maker,\n    make: {\n      assetType: {\n        assetClass: \"ERC721\",\n        contract: contract,\n        tokenId: tokenId\n      },\n      value: \"1\"\n    },\n    take: {\n      assetType: {\n        assetClass: \"ETH\"\n      },\n      value: price\n    },\n    data: {\n      dataType: \"RARIBLE_V2_DATA_V1\",\n      payouts: [],\n      originFees: []\n    },\n    salt\n  };\n}\n\nfunction createEthForERC721Order(maker, contract, tokenId, price, salt) {\n  return {\n    type: \"RARIBLE_V2\",\n    maker: maker,\n    take: {\n      assetType: {\n        assetClass: \"ERC721\",\n        contract: contract,\n        tokenId: tokenId\n      },\n      value: \"1\"\n    },\n    make: {\n      assetType: {\n        assetClass: \"ETH\"\n      },\n      value: price\n    },\n    data: {\n      dataType: \"RARIBLE_V2_DATA_V1\",\n      payouts: [],\n      originFees: []\n    },\n    salt\n  };\n}\n\nexport const createSellOrder = async (type, provider, params) => {\n  let order;\n  let signature;\n  const salt = random(1, 1000);\n  console.log({\n    params\n  });\n\n  switch (type) {\n    case \"MAKE_ERC721_TAKE_ETH\":\n      order = createERC721ForEthOrder(params.accountAddress, params.makeERC721Address, params.makeERC721TokenId, params.ethAmt, salt);\n      console.log({\n        order\n      });\n      const preparedOrder = await prepareOrderMessage(order);\n      console.log({\n        preparedOrder\n      });\n      signature = await sign(provider, preparedOrder, params.accountAddress);\n      break;\n\n    default:\n      break;\n  }\n\n  const raribleOrderUrl = `${RARIBLE_BASE_URL}order/orders`;\n  const raribleOrderResult = await fetch(raribleOrderUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ ...order,\n      signature\n    })\n  });\n  console.log({\n    raribleOrderResult\n  });\n};\nexport const matchSellOrder = async (sellOrder, params) => {\n  const matchingOrder = createEthForERC721Order(params.accountAddress, sellOrder.make.assetType.contract, sellOrder.make.assetType.tokenId, sellOrder.take.value, params.salt || 0);\n  const preparedOrder = await prepareOrderMessage(matchingOrder);\n  console.log({\n    preparedOrder\n  });\n  console.log({\n    sellOrder\n  });\n  const preparedSellOrder = await prepareOrderMessage(createERC721ForEthOrder(sellOrder.maker, sellOrder.make.assetType.contract, sellOrder.make.assetType.tokenId, sellOrder.take.value, parseInt(Number(sellOrder.salt), 10)));\n  return {\n    preparedOrder,\n    preparedSellOrder\n  };\n};\nexport async function prepareMatchingOrder(sellOrder, accountAddress) {\n  const rariblePrepareTxUrl = `${RARIBLE_BASE_URL}order/orders/${sellOrder.hash}/prepareTx`;\n  const res = await fetch(rariblePrepareTxUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      maker: accountAddress,\n      amount: 1,\n      payouts: [],\n      originFees: []\n    })\n  });\n  const resJson = await res.json();\n  console.log({\n    resJson\n  });\n  return resJson;\n}\nexport const matchOrder = async (provider, order) => {};","map":{"version":3,"sources":["/Users/velkoskis/Desktop/Claims/src/rarible/createOrders.js"],"names":["utils","RARIBLE_BASE_URL","sign","getMessageHash","random","min","max","Math","floor","prepareOrderMessage","form","raribleEncodeOrderUrl","res","fetch","method","headers","body","JSON","stringify","resJson","json","console","log","signMessage","createERC721ForEthOrder","maker","contract","tokenId","price","salt","type","make","assetType","assetClass","value","take","data","dataType","payouts","originFees","createEthForERC721Order","createSellOrder","provider","params","order","signature","accountAddress","makeERC721Address","makeERC721TokenId","ethAmt","preparedOrder","raribleOrderUrl","raribleOrderResult","matchSellOrder","sellOrder","matchingOrder","preparedSellOrder","parseInt","Number","prepareMatchingOrder","rariblePrepareTxUrl","hash","amount","matchOrder"],"mappings":"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","sourcesContent":["import { utils } from \"ethers\";\nimport { RARIBLE_BASE_URL } from \"../constants\";\nimport { sign, getMessageHash } from \"./order\";\n\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\n\nasync function prepareOrderMessage(form) {\n  const raribleEncodeOrderUrl = `${RARIBLE_BASE_URL}order/encoder/order`\n  const res = await fetch(raribleEncodeOrderUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(form),\n  });\n  const resJson = await res.json();\n  console.log({ resJson });\n  return resJson.signMessage;\n}\n\nfunction createERC721ForEthOrder(maker, contract, tokenId, price, salt) {\n  return {\n    type: \"RARIBLE_V2\",\n    maker: maker,\n    make: {\n      assetType: {\n        assetClass: \"ERC721\",\n        contract: contract,\n        tokenId: tokenId,\n      },\n      value: \"1\",\n    },\n    take: {\n      assetType: {\n        assetClass: \"ETH\",\n      },\n      value: price,\n    },\n    data: {\n      dataType: \"RARIBLE_V2_DATA_V1\",\n      payouts: [],\n      originFees: [],\n    },\n    salt,\n  };\n}\n\nfunction createEthForERC721Order(maker, contract, tokenId, price, salt) {\n  return {\n    type: \"RARIBLE_V2\",\n    maker: maker,\n    take: {\n      assetType: {\n        assetClass: \"ERC721\",\n        contract: contract,\n        tokenId: tokenId,\n      },\n      value: \"1\",\n    },\n    make: {\n      assetType: {\n        assetClass: \"ETH\",\n      },\n      value: price,\n    },\n    data: {\n      dataType: \"RARIBLE_V2_DATA_V1\",\n      payouts: [],\n      originFees: [],\n    },\n    salt,\n  };\n}\nexport const createSellOrder = async (type, provider, params) => {\n  let order;\n  let signature;\n  const salt = random(1,1000)\n  console.log({params})\n  switch (type) {\n    case \"MAKE_ERC721_TAKE_ETH\":\n      order = createERC721ForEthOrder(\n        params.accountAddress,\n        params.makeERC721Address,\n        params.makeERC721TokenId,\n        params.ethAmt,\n        salt\n      );\n      console.log({ order });\n      const preparedOrder = await prepareOrderMessage(order);\n      console.log({preparedOrder})\n      signature = await sign(provider, preparedOrder, params.accountAddress);\n\n      break;\n\n    default:\n      break;\n  }\n\n  const raribleOrderUrl = `${RARIBLE_BASE_URL}order/orders`\n  const raribleOrderResult = await fetch(raribleOrderUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      ...order,\n      signature,\n    }),\n  });\n  console.log({ raribleOrderResult });\n};\n\nexport const matchSellOrder = async (sellOrder, params) => {\n  const matchingOrder = createEthForERC721Order(\n    params.accountAddress,\n    sellOrder.make.assetType.contract,\n    sellOrder.make.assetType.tokenId,\n    sellOrder.take.value,\n    params.salt || 0,\n  );\n  const preparedOrder = await prepareOrderMessage(matchingOrder);\n  console.log({ preparedOrder });\n  \n  console.log({sellOrder})\n  \n  const preparedSellOrder = await prepareOrderMessage(createERC721ForEthOrder(\n    sellOrder.maker,\n    sellOrder.make.assetType.contract,\n    sellOrder.make.assetType.tokenId,\n    sellOrder.take.value,\n    parseInt(Number(sellOrder.salt), 10)\n  ))\n  return {preparedOrder, preparedSellOrder};\n};\n\nexport async function prepareMatchingOrder(sellOrder, accountAddress) {\n  const rariblePrepareTxUrl = `${RARIBLE_BASE_URL}order/orders/${sellOrder.hash}/prepareTx`\n  const res = await fetch(rariblePrepareTxUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      maker: accountAddress,\n      amount: 1,\n      payouts: [],\n      originFees: []\n    }),\n  });\n  const resJson = await res.json();\n  console.log({ resJson });\n  return resJson;\n}\n\nexport const matchOrder = async (provider, order) => {};\n"]},"metadata":{},"sourceType":"module"}