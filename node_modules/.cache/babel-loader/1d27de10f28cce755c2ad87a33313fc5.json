{"ast":null,"code":"import { utils } from \"ethers\";\nimport { sign } from \"./lazyMint\";\nimport { RARIBLE_BASE_URL } from \"../constants\";\nexport async function generateTokenId(contract, minter) {\n  console.log(\"generating tokenId for\", contract, minter);\n  const raribleTokenIdUrl = `${RARIBLE_BASE_URL}nft/collections/${contract}/generate_token_id?minter=${minter}`;\n  const res = await fetch(raribleTokenIdUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const resJson = await res.json();\n  console.log({\n    resJson\n  });\n  return resJson.tokenId;\n}\n\nasync function createLazyMintForm(tokenId, contract, minter, ipfsHash, type, supply) {\n  // const tokenId = await generateTokenId(contract, minter)\n  console.log(\"generated tokenId\", tokenId);\n\n  if (type == \"ERC721\") {\n    return {\n      \"@type\": \"ERC721\",\n      contract: contract,\n      tokenId: tokenId,\n      uri: `/ipfs/${ipfsHash}`,\n      creators: [{\n        account: minter,\n        value: \"10000\"\n      }],\n      royalties: []\n    };\n  } else if (type == \"ERC1155\") {\n    return {\n      \"@type\": \"ERC1155\",\n      contract: contract,\n      tokenId: tokenId,\n      uri: `/ipfs/${ipfsHash}`,\n      creators: [{\n        account: minter,\n        value: \"10000\"\n      }],\n      royalties: [],\n      supply: supply\n    };\n  }\n}\n\nexport async function createLazyMint(tokenId, provider, contract, minter, ipfsHash, type, supply) {\n  const form = await createLazyMintForm(tokenId, contract, minter, ipfsHash, type, supply);\n  const signature = await sign(provider, 3, contract, form, minter, type);\n  console.log(\"what is the signature \" + signature);\n  return { ...form,\n    signatures: [signature]\n  };\n}\nexport async function putLazyMint(form) {\n  const raribleMintUrl = `${RARIBLE_BASE_URL}nft/mints`;\n  const raribleMintResult = await fetch(raribleMintUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(form)\n  });\n  console.log({\n    raribleMintResult\n  });\n}","map":{"version":3,"sources":["/Users/velkoskis/Desktop/Claims/src/rarible/createLazyMint.js"],"names":["utils","sign","RARIBLE_BASE_URL","generateTokenId","contract","minter","console","log","raribleTokenIdUrl","res","fetch","method","headers","resJson","json","tokenId","createLazyMintForm","ipfsHash","type","supply","uri","creators","account","value","royalties","createLazyMint","provider","form","signature","signatures","putLazyMint","raribleMintUrl","raribleMintResult","body","JSON","stringify"],"mappings":"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","sourcesContent":["import { utils } from \"ethers\";\nimport { sign } from \"./lazyMint\";\nimport { RARIBLE_BASE_URL } from \"../constants\";\n\nexport async function generateTokenId(contract, minter) {\n\tconsole.log(\"generating tokenId for\", contract, minter)\n  const raribleTokenIdUrl = `${RARIBLE_BASE_URL}nft/collections/${contract}/generate_token_id?minter=${minter}`\n  const res = await fetch(raribleTokenIdUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const resJson = await res.json();\n  console.log({resJson})\n\treturn resJson.tokenId\n}\n\nasync function createLazyMintForm(tokenId, contract, minter, ipfsHash, type, supply) {\n  // const tokenId = await generateTokenId(contract, minter)\n\tconsole.log(\"generated tokenId\", tokenId)\n  if (type == \"ERC721\") {\n\treturn {\n\t\t\"@type\": \"ERC721\",\n\t\tcontract: contract,\n\t\ttokenId: tokenId,\n\t\turi: `/ipfs/${ipfsHash}`,\n\t\tcreators: [{ account: minter, value: \"10000\" }],\n\t\troyalties: []\n\t}\n\n  }\n  else if (type == \"ERC1155\") {\n\treturn {\n\t\t\"@type\": \"ERC1155\",\n\t\tcontract: contract,\n\t\ttokenId: tokenId,\n\t\turi: `/ipfs/${ipfsHash}`,\n\t\tcreators: [{ account: minter, value: \"10000\" }],\n\t\troyalties: [],\n    supply: supply\n\t}\n\n  }\n}\n\nexport async function createLazyMint(tokenId, provider, contract, minter, ipfsHash, type, supply) {\n  const form = await createLazyMintForm(tokenId, contract, minter, ipfsHash, type, supply)\n  const signature = await sign(provider, 3, contract, form, minter, type)\n  console.log(\"what is the signature \" + signature)\n\treturn { ...form, signatures: [signature] }\n}\n\nexport async function putLazyMint(form) {\n  const raribleMintUrl = `${RARIBLE_BASE_URL}nft/mints`\n  const raribleMintResult = await fetch(raribleMintUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(form),\n  });\n  console.log({raribleMintResult})\n}"]},"metadata":{},"sourceType":"module"}